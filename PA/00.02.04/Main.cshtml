@using DotNetNuke.Entities.Modules
@using DotNetNuke.Web.Client.ClientResourceManagement
@using DotNetNuke.Security;
@using DotNetNuke.Entities.Modules;
@using DotNetNuke.Entities.Users;
@using System.Web;
@inherits DotNetNuke.Web.Razor.DotNetNukeWebPage<dynamic>


@{
    //some DNN core js
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/js/dnn.js");
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/js/dnncore.js");
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/js/dnn.servicesframework.js");
    //some UManage core js
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/DesktopModules/UManage/app/localization/localization.js");
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/DesktopModules/UManage/app/bower_components/angular/angular.min.js");
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/DesktopModules/UManage/app/js/controllers/controller.js");
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/DesktopModules/UManage/app/js/directives/directives.js");
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/DesktopModules/UManage/app/js/services/service.js");
    //the application js
    ClientResourceManager.RegisterScript(Dnn.Page(), "~/DesktopModules/UManage/app/js/app.js");
    //some CSS
    ClientResourceManager.RegisterStyleSheet(Dnn.Page(), "~/DesktopModules/UManage/css/style.css");
    ClientResourceManager.RegisterStyleSheet(Dnn.Page(), "~/DesktopModules/UManage/app/bower_components/entypo/font/entypo.css");

    System.Web.UI.ScriptManager.GetCurrent(Dnn.Page()).EnablePageMethods = true;

    try
    {
        DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxScriptSupport();
        DotNetNuke.Framework.ServicesFramework.Instance.RequestAjaxAntiForgerySupport();
    }
    catch(Exception ex)
    {
        DotNetNuke.Services.Log.EventLog.EventLogController objEventLog = new DotNetNuke.Services.Log.EventLog.EventLogController();
        objEventLog.AddLog("UManage AntiForgery Error", ex.Message + " - " + ex.StackTrace, DotNetNuke.Entities.Portals.PortalController.Instance.GetCurrentPortalSettings(), -1, DotNetNuke.Services.Log.EventLog.EventLogController.EventLogType.ADMIN_ALERT);
    }

    int PID = DotNetNuke.Entities.Portals.PortalController.Instance.GetCurrentPortalSettings().PortalId;
    int moduleID = 0;
    int tabID = 0;
    string adminRoleName = DotNetNuke.Entities.Portals.PortalController.Instance.GetCurrentPortalSettings().AdministratorRoleName;
    string portalAlias = DotNetNuke.Entities.Portals.PortalController.Instance.GetCurrentPortalSettings().PortalAlias.HTTPAlias;
    string VAR_PageBase = DotNetNuke.Common.Globals.NavigateURL();
    string VAR_ModulePath = "";
    string VAR_ProfilePicBasePath = "";
    string VAR_CurrentLanguage = "";
    string VAR_PortalID = "";
    string VAR_FullEditPath = "";
    string VAR_IsAdmin = "";

    if (Request.QueryString["iu"] != null)
    {
        if (Request.QueryString["iu"].ToString() != "")
        {
            // impersonate! 
            int uid = int.Parse(Request.QueryString["iu"].ToString());

            UserInfo MyUserInfo = UserController.GetUserById(PID, uid);
            if ((MyUserInfo != null))
            {
                //Remove user from cache
                if (Page.User != null)
                {
                    DotNetNuke.Common.Utilities.DataCache.ClearUserCache(PID, Context.User.Identity.Name);
                }

                // sign current user out
                PortalSecurity objPortalSecurity = new PortalSecurity();
                objPortalSecurity.SignOut();

                // sign new user in
                UserController.UserLogin(PID, MyUserInfo, DotNetNuke.Entities.Portals.PortalController.Instance.GetCurrentPortalSettings().PortalName, Request.UserHostAddress, false);

                // redirect to the base url
                if (HttpContext.Current.Request.IsSecureConnection)
                {
                    Response.Redirect("https://" + portalAlias, true);
                }
                else
                {
                    Response.Redirect("http://" + portalAlias, true);
                }
            }
        }
    }
    else
    {

        var moduleController = new ModuleController();
        var adminUserModule = moduleController.GetModuleByDefinition(PID, "User Accounts");
        var umUserModule = moduleController.GetModuleByDefinition(PID, "UManage");
        moduleID = umUserModule.ModuleID;
        tabID = umUserModule.TabID;

        if (Dnn.User.UserID <= 0)
        {
            // no one is logged, return into home page
            Response.Redirect(DotNetNuke.Common.Globals.NavigateURL("Access Denied"), true);
        }
        else
        {
            if (Request.QueryString["SkinSrc"] == null)
            {
                //we are going full page :)
                Response.Redirect(DotNetNuke.Common.Globals.NavigateURL(umUserModule.TabID, "", "SkinSrc=%5BG%5DSkins%2f_default%2fNo+Skin&ContainerSrc=%5BG%5DContainers%2f_default%2fNo+Container"), false);
            }
        }

        //Check that in any case this module cannot be accessed by anounymous users
        VAR_ModulePath = "/DesktopModules/" + umUserModule.DesktopModule.FolderName;

        VAR_ProfilePicBasePath = "/profilepic.ashx?userid=";

        VAR_CurrentLanguage = (System.Threading.Thread.CurrentThread.CurrentCulture.Name).Split('-')[0].ToString();
        VAR_PortalID = PID.ToString();

        var url = DotNetNuke.Common.Globals.NavigateURL(adminUserModule.TabID, "Edit", "mid=" + adminUserModule.ModuleID, "userId={{userid}}", "popUp=true");
        var urlClose = DotNetNuke.Common.Globals.NavigateURL();
        VAR_FullEditPath = url;

        if (Dnn.User.IsInRole(adminRoleName))
        {
            VAR_IsAdmin = "1";
        }
    }
}
<!-- the app view -->
<input type="hidden" id="VAR_PageBase" name="VAR_PageBase" value="@VAR_PageBase" />
<section data-ng-app="opsiModule" class="app">
    <header class="app-header">
        <h1 class="app-logo"><a>UManage <small>- User Manager</small></a></h1>
        <nav class="app-menu opsi-main-menu">
            <a class="closeme" href="#" onclick="javascript:location.href = window.location.protocol + '//' + window.location.hostname;"><span class="closeme__icon icon-cancel"></span></a>
            <span style="display: none;">
                <span class="icon-menu"></span>
                <ul class="menu-main">
                    <li class="item">
                        <a href="#">Go back</a>
                    </li>
                </ul>
            </span>
        </nav>
    </header>
    <app-menu></app-menu>
    <main class="app-section">
        <opsi-user-tiles></opsi-user-tiles>
        <opsi-user-detail></opsi-user-detail>
    </main>
    <footer class="app-footer">
        Module developed with <span class="icon-heart" title="code"></span>by <strong><a href="http://www.opsi.it" target="_blank">OPSI </a></strong>©2015. Released under GNU/GPL licence.
    </footer>
    <opsi-dialog></opsi-dialog>
    <opsi-dialog-modal></opsi-dialog-modal>
    <app-error></app-error>
</section>

<!-- ng-app config -->
<script>
    var servicesFramework = "";
   ; (function () {
        // getting a new serviceFramework instance for the angular app
        var angular, app, serviceFramework;

        angular = this.angular;

        serviceFramework = $.ServicesFramework(@moduleID);


        console.log(serviceFramework);

        angular.module('opsiModule')
        // configuring http provider
        .config(function ($httpProvider) {
            return $httpProvider.defaults.headers.get = $httpProvider.defaults.headers.post = {
                Accept: 'text/html',
                'Content-Type': 'text/html; charset=UTF-8',
                ModuleId: '@moduleID',
                RequestVerificationToken: serviceFramework.getAntiForgeryValue(),
                TabId: '@tabID',
                'X-Requested-With': 'XMLHttpRequest'
            };
        })
        // configuring fum provider
        .config(function ($fumProvider) {
            $fumProvider.setProperty('fullEditPath', '@VAR_FullEditPath');
            $fumProvider.setProperty('moduleApi', serviceFramework.getServiceRoot('UManage'));
            $fumProvider.setProperty('moduleID', '@moduleID');
            $fumProvider.setProperty('modulePath', '@VAR_ModulePath');
            $fumProvider.setProperty('profilePicPath', '@VAR_ProfilePicBasePath');
            $fumProvider.setProperty('sudo', '@VAR_IsAdmin');
            $fumProvider.setProperty('tabID', '@tabID');
            $fumProvider.setProperty('currentLanguage', '@VAR_CurrentLanguage');
            $fumProvider.setProperty('portalID', '@VAR_PortalID');
        });

    }).call(this);
</script>
<style>
    /* Little hack to remove "only admin visible" message from page. */
    .dnnFormMessage.dnnFormInfo.dnnFormInfoAdminErrMssg {
        display: none!important;
    }
</style>